cmake_minimum_required(VERSION 3.10)

project(project_name
   VERSION 0.0.1
   DESCRIPTION "project_name description"
   LANGUAGES CXX
)

# Include cmake scripts
include(cmake/configurations.cmake)
include(cmake/warnings.cmake)
include(cmake/conan.cmake)

# Want to see make messages
set(CMAKE_VERBOSE_MAKEFILE ON)
set(BUILDING_ON_OPENSUSE OFF CACHE BOOL "Building on openSUSE is slightly different")

# Group CMake projects together
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Set up Conan dependencies
# To find packages:
#    - https://bintray.com/bincrafters/public-conan
#    - https://conan.io/center/
set(CONAN_EXTRA_REQUIRES "")
set(CONAN_EXTRA_OPTIONS "")
set(CONAN_EXTRA_REQUIRES ${CONAN_EXTRA_REQUIRES} 
   gtest/1.10.0
   imgui/1.79

)
# Only import conan packages for the following libraries if on Windows or Debian, while linking against
# system installed packages on openSUSE.
if(NOT BUILDING_ON_OPENSUSE)
   set(CONAN_EXTRA_REQUIRES ${CONAN_EXTRA_REQUIRES}
      glew/2.1.0
      sdl2/2.0.12@bincrafters/stable)
endif()
# The following packages were all problematic for the same reason: missing libgl1-mesa-dev, 
# which doesn't exist in any openSUSE repository and importing Debian package didn't work
# neither. Solution for this was to install system packages for SDL2 and GLEW and link to
# those on openSUSE, while sticking to the simplicity of conan on Windows and Debian where
# they worked. Every now and then try if they started to work:
#     imgui-sfml/2.1@bincrafters/stable
#     sdl2/2.0.12@bincrafters/stable
#     qt/5.15.1@bincrafters/stable
#     glew/2.1.0
run_conan()

# Set output directory of all projects to be somewhere sensible
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Additional include directories
if (BUILDING_ON_OPENSUSE)
   # imgui sources #include <SDL2.h> not #include <SDL2/SDL2.h> so I need to make this discoverable
   include_directories(/usr/include/SDL2)
endif()
include_directories(3rdparty/imgui/misc/cpp)
include_directories(3rdparty/imgui/backends)

# Projects in this solution
add_subdirectory(library)
add_subdirectory(tests)
add_subdirectory(executable)

# Make app the default startup project in Visual Studio rather than autogenerated ALL_BUILDS project
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT executable)

# Set working directory property in Visual Studio so that resource files will be in expected relative place
set_property(TARGET executable PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
